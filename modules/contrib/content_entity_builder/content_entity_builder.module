<?php

/**
 * @file
 * Provides content entity by config.
 */

use Drupal\Core\Entity\ContentEntityType;

/**
 * Implements hook_entity_type_build().
 */
function content_entity_builder_entity_type_build(array &$entity_types) {
  // Check for content_type config entity.
  if (!empty($entity_types['content_type'])) {
    $content_type = $entity_types['content_type'];
    // unset($entity_types['content_type']);
    // Get the existing content types.
    // $content_types = ContentType::loadMultiple();
    $content_types = \Drupal::entityTypeManager()->createHandlerInstance(
      $content_type->getHandlerClass('storage'),
      $content_type
    )->loadMultiple();

    // Base definitions for the entity type.
    $base_definition = [
      'handlers' => [
        'view_builder' => 'Drupal\Core\Entity\EntityViewBuilder',
        'form' => [
          'default' => 'Drupal\content_entity_builder\Form\ContentForm',
          'add' => 'Drupal\content_entity_builder\Form\ContentForm',
          'edit' => 'Drupal\content_entity_builder\Form\ContentForm',
          'delete' => 'Drupal\Core\Entity\ContentEntityDeleteForm',
        ],
        'list_builder' => 'Drupal\content_entity_builder\ContentEntityBuilderListBuilder',
        'access' => 'Drupal\content_entity_builder\ContentEntityBuilderAccessControlHandler',
        'views_data' => 'Drupal\views\EntityViewsData',
        'storage_schema' => 'Drupal\content_entity_builder\ContentEntityBuilderStorageSchema',
      ],
      'translatable' => FALSE,
      'provider' => 'content_entity_builder',
      'class' => 'Drupal\content_entity_builder\Entity\Content',
      'group' => 'content',
      'group_label' => t('Content'),	  
    ];

    if (!empty($content_types)) {
      // Add custom particular definitions for each entity.
      foreach ($content_types as $type) {
        $content_type_id = $type->id();
        $type = \Drupal::entityTypeManager()->createHandlerInstance(
            $content_type->getHandlerClass('storage'),
            $content_type
          )->load($content_type_id);

        // Skip it if it is not applied update.
        if (!$type->isApplied()) {
          continue;
        }

        // Definitions for the entity type.
        $paths = $type->getEntityPaths();
        $path_view = !empty($paths['view']) ? $paths['view'] : "/$content_type_id/{" . $content_type_id . "}";
        $path_add = !empty($paths['add']) ? $paths['add'] : "/$content_type_id/add";
        $path_edit = !empty($paths['edit']) ? $paths['edit'] : "/$content_type_id/{" . $content_type_id . "}/edit";
        $path_delete = !empty($paths['delete']) ? $paths['delete'] : "/$content_type_id/{" . $content_type_id . "}/delete";
        $definition = [
          'id' => $content_type_id,
          'label' => $type->label(),
          'base_table' => $content_type_id,
          'links' => [
            'canonical' => $path_view,
            'add-form' => $path_add,
            'edit-form' => $path_edit,
            'delete-form' => $path_delete,
            'collection' => '/admin/structure/content-types/manage/{' . $content_type_id . '}/list',
          ],
          'field_ui_base_route' => 'entity.' . $type->id() . '.admin_form',
        ];
        $keys = array_filter($type->getEntityKeys());
        if (empty($keys)) {
          $keys = [
            'id' => 'id',
            'uuid' => 'uuid',
          ];
        }
        $definition['entity_keys'] = $keys;
        $definition['config_dependencies'] = [
          'config' => ["content_entity_builder.content_type.$content_type_id"],
        ];
        // Merge the definitions.
        $definition = array_merge($definition, $base_definition);
        // Add the new content entity to the entity types.
        $entity_types[$definition['id']] = new ContentEntityType($definition);
      }
    }
  }

}


/**
 * Implements hook_file_download().
 */
function content_entity_builder_file_download($uri) {
  //$scheme = file_uri_scheme($uri);
  $scheme = \Drupal::service('stream_wrapper_manager')->getScheme($uri);  
  $target = \Drupal::service('stream_wrapper_manager')->getTarget($uri);
  $pos = strpos($target, '.tar.gz');
  if ($scheme == 'temporary' && $pos) {
    if (\Drupal::currentUser()->hasPermission('administer content entity types')) {
      //$request = \Drupal::request();
      //$date = DateTime::createFromFormat('U', $request->server->get('REQUEST_TIME'));
      //$date_string = $date->format('Y-m-d-H-i');
      //$hostname = str_replace('.', '-', $request->getHttpHost());
	  
      //$filename = substr($target, 0, $pos) . '-' . $hostname . '-' . $date_string . '.tar.gz';
	  $filename = $target;
      $disposition = 'attachment; filename="' . $filename . '"';
      return [
        'Content-disposition' => $disposition,
      ];
    }
    return -1;
  }
}